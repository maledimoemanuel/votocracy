{"ast":null,"code":"/*import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Create() {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    profilePicture: null,\r\n    profilePicturePreview: '', // Store the profile picture preview\r\n    profilePictureURL: '', // Store the profile picture URL\r\n    participants: [],\r\n    closingDate: '',\r\n  });\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, files } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: name === 'profilePicture' ? files[0] : value,\r\n    }));\r\n\r\n    if (name === 'profilePicture') {\r\n      // Preview the profile picture\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setFormData((prevData) => ({\r\n          ...prevData,\r\n          profilePicturePreview: e.target.result,\r\n        }));\r\n      };\r\n      reader.readAsDataURL(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveParticipant = (index) => {\r\n    const updatedParticipants = [...formData.participants];\r\n    updatedParticipants.splice(index, 1);\r\n    setFormData({ ...formData, participants: updatedParticipants });\r\n  };\r\n\r\n  const handleParticipantChange = (e, index) => {\r\n    const { name, value, files } = e.target;\r\n    const updatedParticipants = [...formData.participants];\r\n    updatedParticipants[index][name] = name === 'participantPicture' ? files[0] : value;\r\n    setFormData({ ...formData, participants: updatedParticipants });\r\n  };\r\n\r\n  const handleParticipant = () => {\r\n    const newParticipant = {\r\n      name: '',\r\n      description: '',\r\n      participantPicture: null,\r\n      participantPicturePreview: '', // Store the participant picture preview\r\n      participantPictureURL: '', // Store the participant picture URL\r\n    };\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      participants: [...prevData.participants, newParticipant],\r\n    }));\r\n  };\r\n\r\n  const handleParticipantPictureUpload = async (file, index) => {\r\n    if (file) {\r\n      try {\r\n        const storageRef = ref(storage, `participant_images/${file.name}`);\r\n        await uploadBytes(storageRef, file);\r\n        const imageUrl = await getDownloadURL(storageRef);\r\n  \r\n        const updatedParticipants = [...formData.participants];\r\n        updatedParticipants[index].participantPictureURL = imageUrl;\r\n        setFormData({ ...formData, participants: updatedParticipants });\r\n        return imageUrl; // Return the Firebase URL\r\n      } catch (error) {\r\n        console.error('Error uploading participant image:', error);\r\n      }\r\n    }\r\n  \r\n    return ''; // Return an empty string if no file is provided\r\n  };\r\n  \r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    // Prepare the form data to send to the server\r\n    const data = new FormData();\r\n    data.append('title', formData.title);\r\n    data.append('closingDate', formData.closingDate);\r\n    data.append('profilePicture', formData.profilePicture);\r\n    data.append('profilePictureURL', formData.profilePictureURL);\r\n  \r\n    \r\n  // Get the Firebase URLs for participant pictures\r\n  const participantUrls = await Promise.all(\r\n    formData.participants.map(async (participant, index) => {\r\n      if (participant.participantPictureURL) return participant.participantPictureURL;\r\n      return await handleParticipantPictureUpload(participant.participantPicture, index);\r\n    })\r\n  );\r\n\r\n  formData.participants.forEach((participant, index) => {\r\n    data.append(`participants[${index}].name`, participant.name);\r\n    data.append(`participants[${index}].description`, participant.description);\r\n    data.append(`participants[${index}].participantPicture`, participant.participantPicture);\r\n    data.append(`participants[${index}].participantPictureURL`, participantUrls[index]);\r\n  });\r\n  \r\n    // Make a POST request to your server's endpoint\r\n    axios\r\n      .post('http://localhost:8086/create-event', formData)\r\n      .then((response) => {\r\n        // Handle the response from the server, e.g., show a success message or redirect\r\n        console.log('Event created:', response.data);\r\n      })\r\n      .catch((error) => {\r\n        // Handle errors, e.g., show an error message\r\n        console.error('Error creating event:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-md mx-auto\">\r\n      <form className=\"bg-gray-300 shadow-md rounded px-8 pt-6 pb-8 mb-4\">\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"title\">\r\n            Title/Name\r\n          </label>\r\n          <input\r\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n            type=\"text\"\r\n            id=\"title\"\r\n            name=\"title\"\r\n            placeholder=\"Enter name/title\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"profilePicture\">\r\n            Profile Picture/Logo\r\n          </label>\r\n          <input\r\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n            type=\"file\"\r\n            id=\"profilePicture\"\r\n            name=\"profilePicture\"\r\n            accept=\"image/*\" // Allow only image files\r\n            onChange={handleInputChange}\r\n          />\r\n          {formData.profilePicturePreview && (\r\n            <img\r\n              src={formData.profilePicturePreview}\r\n              alt=\"Profile Preview\"\r\n              className=\"mt-2 w-24 h-24 object-cover rounded-full\"\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"closingDate\">\r\n            Closing Date\r\n          </label>\r\n          <input\r\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n            type=\"date\"\r\n            id=\"closingDate\"\r\n            name=\"closingDate\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">Participants</label>\r\n          {formData.participants.map((participant, index) => (\r\n            <div key={index} className=\"mb-2\">\r\n              <input\r\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                type=\"text\"\r\n                placeholder=\"Participant's Name\"\r\n                name={`participants[${index}].name`}\r\n                onChange={(e) => handleParticipantChange(e, index)}\r\n              />\r\n              <input\r\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                type=\"text\"\r\n                placeholder=\"Description\"\r\n                name={`participants[${index}].description`}\r\n                onChange={(e) => handleParticipantChange(e, index)}\r\n              />\r\n              <input\r\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                type=\"file\"\r\n                id={`participantPicture-${index}`}\r\n                name={`participants[${index}].participantPicture`}\r\n                accept=\"image/*\"\r\n                onChange={(e) => {\r\n                  handleParticipantChange(e, index);\r\n                  handleParticipantPictureUpload(e.target.files[0], index);\r\n                }}\r\n              />\r\n              {participant.participantPicturePreview && (\r\n                <img\r\n                  src={participant.participantPicturePreview}\r\n                  alt={`Participant ${index + 1}`}\r\n                  className=\"mt-2 w-24 h-24 object-cover rounded-full\"\r\n                />\r\n              )}\r\n              <button\r\n                type=\"button\"\r\n                className=\"text-red-500 hover:text-red-700\"\r\n                onClick={() => handleRemoveParticipant(index)}\r\n              >\r\n                Remove participant\r\n              </button>\r\n            </div>\r\n          ))}\r\n          <button\r\n            type=\"button\"\r\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n            onClick={handleParticipant}\r\n          >\r\n            Add Participant\r\n          </button>\r\n        </div>\r\n        <div className=\"mb-6\">\r\n          <button\r\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n            type=\"submit\"\r\n            onClick={handleSubmit}\r\n          >\r\n            Create Event\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Create;\r\n*/","map":{"version":3,"names":[],"sources":["/Users/maledimoemanuel/Desktop/Projects/votocracy/src/components/pages/Create.js"],"sourcesContent":["/*import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Create() {\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    profilePicture: null,\r\n    profilePicturePreview: '', // Store the profile picture preview\r\n    profilePictureURL: '', // Store the profile picture URL\r\n    participants: [],\r\n    closingDate: '',\r\n  });\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, files } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: name === 'profilePicture' ? files[0] : value,\r\n    }));\r\n\r\n    if (name === 'profilePicture') {\r\n      // Preview the profile picture\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setFormData((prevData) => ({\r\n          ...prevData,\r\n          profilePicturePreview: e.target.result,\r\n        }));\r\n      };\r\n      reader.readAsDataURL(files[0]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveParticipant = (index) => {\r\n    const updatedParticipants = [...formData.participants];\r\n    updatedParticipants.splice(index, 1);\r\n    setFormData({ ...formData, participants: updatedParticipants });\r\n  };\r\n\r\n  const handleParticipantChange = (e, index) => {\r\n    const { name, value, files } = e.target;\r\n    const updatedParticipants = [...formData.participants];\r\n    updatedParticipants[index][name] = name === 'participantPicture' ? files[0] : value;\r\n    setFormData({ ...formData, participants: updatedParticipants });\r\n  };\r\n\r\n  const handleParticipant = () => {\r\n    const newParticipant = {\r\n      name: '',\r\n      description: '',\r\n      participantPicture: null,\r\n      participantPicturePreview: '', // Store the participant picture preview\r\n      participantPictureURL: '', // Store the participant picture URL\r\n    };\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      participants: [...prevData.participants, newParticipant],\r\n    }));\r\n  };\r\n\r\n  const handleParticipantPictureUpload = async (file, index) => {\r\n    if (file) {\r\n      try {\r\n        const storageRef = ref(storage, `participant_images/${file.name}`);\r\n        await uploadBytes(storageRef, file);\r\n        const imageUrl = await getDownloadURL(storageRef);\r\n  \r\n        const updatedParticipants = [...formData.participants];\r\n        updatedParticipants[index].participantPictureURL = imageUrl;\r\n        setFormData({ ...formData, participants: updatedParticipants });\r\n        return imageUrl; // Return the Firebase URL\r\n      } catch (error) {\r\n        console.error('Error uploading participant image:', error);\r\n      }\r\n    }\r\n  \r\n    return ''; // Return an empty string if no file is provided\r\n  };\r\n  \r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    // Prepare the form data to send to the server\r\n    const data = new FormData();\r\n    data.append('title', formData.title);\r\n    data.append('closingDate', formData.closingDate);\r\n    data.append('profilePicture', formData.profilePicture);\r\n    data.append('profilePictureURL', formData.profilePictureURL);\r\n  \r\n    \r\n  // Get the Firebase URLs for participant pictures\r\n  const participantUrls = await Promise.all(\r\n    formData.participants.map(async (participant, index) => {\r\n      if (participant.participantPictureURL) return participant.participantPictureURL;\r\n      return await handleParticipantPictureUpload(participant.participantPicture, index);\r\n    })\r\n  );\r\n\r\n  formData.participants.forEach((participant, index) => {\r\n    data.append(`participants[${index}].name`, participant.name);\r\n    data.append(`participants[${index}].description`, participant.description);\r\n    data.append(`participants[${index}].participantPicture`, participant.participantPicture);\r\n    data.append(`participants[${index}].participantPictureURL`, participantUrls[index]);\r\n  });\r\n  \r\n    // Make a POST request to your server's endpoint\r\n    axios\r\n      .post('http://localhost:8086/create-event', formData)\r\n      .then((response) => {\r\n        // Handle the response from the server, e.g., show a success message or redirect\r\n        console.log('Event created:', response.data);\r\n      })\r\n      .catch((error) => {\r\n        // Handle errors, e.g., show an error message\r\n        console.error('Error creating event:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-md mx-auto\">\r\n      <form className=\"bg-gray-300 shadow-md rounded px-8 pt-6 pb-8 mb-4\">\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"title\">\r\n            Title/Name\r\n          </label>\r\n          <input\r\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n            type=\"text\"\r\n            id=\"title\"\r\n            name=\"title\"\r\n            placeholder=\"Enter name/title\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"profilePicture\">\r\n            Profile Picture/Logo\r\n          </label>\r\n          <input\r\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n            type=\"file\"\r\n            id=\"profilePicture\"\r\n            name=\"profilePicture\"\r\n            accept=\"image/*\" // Allow only image files\r\n            onChange={handleInputChange}\r\n          />\r\n          {formData.profilePicturePreview && (\r\n            <img\r\n              src={formData.profilePicturePreview}\r\n              alt=\"Profile Preview\"\r\n              className=\"mt-2 w-24 h-24 object-cover rounded-full\"\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"closingDate\">\r\n            Closing Date\r\n          </label>\r\n          <input\r\n            className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n            type=\"date\"\r\n            id=\"closingDate\"\r\n            name=\"closingDate\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-gray-700 text-sm font-bold mb-2\">Participants</label>\r\n          {formData.participants.map((participant, index) => (\r\n            <div key={index} className=\"mb-2\">\r\n              <input\r\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                type=\"text\"\r\n                placeholder=\"Participant's Name\"\r\n                name={`participants[${index}].name`}\r\n                onChange={(e) => handleParticipantChange(e, index)}\r\n              />\r\n              <input\r\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                type=\"text\"\r\n                placeholder=\"Description\"\r\n                name={`participants[${index}].description`}\r\n                onChange={(e) => handleParticipantChange(e, index)}\r\n              />\r\n              <input\r\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\r\n                type=\"file\"\r\n                id={`participantPicture-${index}`}\r\n                name={`participants[${index}].participantPicture`}\r\n                accept=\"image/*\"\r\n                onChange={(e) => {\r\n                  handleParticipantChange(e, index);\r\n                  handleParticipantPictureUpload(e.target.files[0], index);\r\n                }}\r\n              />\r\n              {participant.participantPicturePreview && (\r\n                <img\r\n                  src={participant.participantPicturePreview}\r\n                  alt={`Participant ${index + 1}`}\r\n                  className=\"mt-2 w-24 h-24 object-cover rounded-full\"\r\n                />\r\n              )}\r\n              <button\r\n                type=\"button\"\r\n                className=\"text-red-500 hover:text-red-700\"\r\n                onClick={() => handleRemoveParticipant(index)}\r\n              >\r\n                Remove participant\r\n              </button>\r\n            </div>\r\n          ))}\r\n          <button\r\n            type=\"button\"\r\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n            onClick={handleParticipant}\r\n          >\r\n            Add Participant\r\n          </button>\r\n        </div>\r\n        <div className=\"mb-6\">\r\n          <button\r\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\r\n            type=\"submit\"\r\n            onClick={handleSubmit}\r\n          >\r\n            Create Event\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Create;\r\n*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}